*init protocol step: confirmation
    * Client check & response
    * Server check and fsm advance

*Login:
    * Create unified message type (prefix, diff for serv&client
        +content, unified separators)
    * Make unified message checking (first check header, then parse content)
        * Impl in client, check init msg
        * Insert into sess
    * Send login&passwd to server
    * Parse and match with file server side

*Protocol remake:
    * Impl a netstring full msg
    * Fix problem: currently delimiter : still can not be inside a word
        * Remake message packing
        * Remake message parsing
    * Idea: make string lengths ints (not decimal strings), since there is max

*File list:
    * Make client dialogue with options (as of now -- simple)
    * Make client action & protocol request
    * Make server response
    * Parse out database and add names to the response
    * On parsing dirent check files (& load meta into memory?)
        * Write metafile parsing
        * On dirent parsing parse all .meta files & fill meta array
            * Test out all metas parsing
            * Test on bad directories
    * Pack filenames & descritions, send them out
    * Rewrite client frontend to display them
    * Add special * access modifier parsing in meta

*File query:
    * Make protocol request
    * Recieve serverside
    * Lookup file
    * If not good, send reply (no file/no access) (currently only no file)

Login remake:
    - Remake passwd to in-mem storage
        - Check passwd f for correctness
    - Add username field to session (NULL = not logged in)
    - Update file list as to only display avalilable files
    - Update file query as to check privileges
    - Make login one of the actions & optional
    - Remake server as not to expect login and add privilege to session info

File transfer:
    - Send out file length or num packets in start-transfer message
    - Implement buf for client & partial reading for both client and server
    - Add session state & start streaming file immediately
    - Create file & recieve->write client side
    - Test single write
    - Implement cutting up
        - Note: here we should deal with writefds

    - Time to address problem of disconnections (since it is critical in the middle of writing a file)
        - Idea: Add file status to metafile (valid, writing, corrupted), for disconnections when loading file
        - Idea: implement timeouts for pending packages
        - Idea: need to check eof if sock (=disconnected)
        - Idea: implement (^C) interception as regular exit, and send disconnection message

Leave message:

Admin user:

Leave message for admin:

Refac:
    - Brush up client ui (new lines & prettiness)
    - Refactor all db stuff
    - Replace my own suffering with strdup, use strcat if two args, remake manual places to concat
    - Freestyle refac pass

Other:
    - Restore db content after clearing it with dumb fopens
    - Make title a bbs property & send with init msg
