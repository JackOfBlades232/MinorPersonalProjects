*init protocol step: confirmation
    * Client check & response
    * Server check and fsm advance

*Login:
    * Create unified message type (prefix, diff for serv&client
        +content, unified separators)
    * Make unified message checking (first check header, then parse content)
        * Impl in client, check init msg
        * Insert into sess
    * Send login&passwd to server
    * Parse and match with file server side

*Protocol remake:
    * Impl a netstring full msg
    * Fix problem: currently delimiter : still can not be inside a word
        * Remake message packing
        * Remake message parsing
    * Idea: make string lengths ints (not decimal strings), since there is max

*File list:
    * Make client dialogue with options (as of now -- simple)
    * Make client action & protocol request
    * Make server response
    * Parse out database and add names to the response
    * On parsing dirent check files (& load meta into memory?)
        * Write metafile parsing
        * On dirent parsing parse all .meta files & fill meta array
            * Test out all metas parsing
            * Test on bad directories
    * Pack filenames & descritions, send them out
    * Rewrite client frontend to display them
    * Add special * access modifier parsing in meta

*File query:
    * Make protocol request
    * Recieve serverside
    * Lookup file
    * If not good, send reply (no file/no access) (currently only no file)

*Login remake:
    * Remake passwd to in-mem storage
        * Check passwd f for correctness
    * Add username field to session (NULL = not logged in)
    * Update file query as to check privileges
    * Update file list as to only display avalilable files
    * Make login one of the actions & optional

*File transfer:
    * Implement buf for client & partial reading for both client and server
    * Send out file length or num packets in start-transfer message
    * Add session state & start streaming file immediately
    * Create file & recieve->write client side
        * DEBUG: stage: bad packet
    * Test cutting up
    * Fix the free bug in protocol::store_word
        * The problem: new p_add and free together cause freeing of invalid pointer
            separately they are good

*Leave message:
    * Make leave-message client action & dialogue (with max message len)
    * Make message file, and db_init message file checking (enties: user\n msg\n\n), if not present -- create
    * Serverside upon recieving a message put it in the messages.txt file

*Refac 1:
    * Sort out the error scenarios in client
    * Go through in-code todos
    * Refactor db stuff & db todos
    * Go through client.c todos
    * Add error messages to client for special situations
    * Remake all sizeof() to *var, instead of type (fucked me up hard with byte_arr)
    * Make a distinct name for message to admin (not to collide with message)

*Other:
    * Make title a bbs property & send with init msg
    * Remake file i/o on transfer to read/write for optimization
    * Add download progress bar to client (in packets, redraw with \b)

*Disconnections, timeouts & exceptional situations
    * Check 0 in read sock (=disconnected)
        * If serverside, close session (set state = err)
        * If clientside, display message and kill client (string of err codes or set sock=-1 and exit loop?)
    * Implement timeouts for awaiting messages (clientside, server should be ok with radiosilence)
    * If disconnected while transferring file, log this in client
    * implement (^C) interception as regular exit
        * Clientside: just add an exit command and leave ^C to be a killer
        * Serverside: close all sessions porperly and terminate

*Poster & Admin addition:
    * Add a star-user to passwd_f and parsing, flag to user_data and flag to session
    * Add new login response: logged in as admin, and change logged_in glob var to login status (no, yes, admin)
    * Make new action list and dialogue variants in ask for action for poster & admin users

*Poster:
    *Add new file (edit the empty meta & transfer):
        * Input filename, send to server to check if it exists (if yes, fail)
        * Input description (with cap) -> input users sep-d by ' ' (check for correctness as meta)
        * Send it all as words over to the server
        * Serverside address new db func: create new file meta in mem, write to disk, create empty file
        * Immediately start streaming data (like server) from client
        * On server add read state to session to recieve data
        * Debug the invalid db after upload bug
        * Debug the insane loop serverside on posting multi-packet file
        * Strip relative path in query/post filenames
        * Add writing tag to metafile and delete it if failed to complete

*Admin:
    *Add new user:
        * Do the usual ting
        * Add specifying user type in add user

    *Read & clear notes:
        * Dialogue & send request
        * DB: read first note in file, repl it by all '\0' and return to server
        * Server: if there is a note in db, send it, else, send no_notes
        * Client recv, display and be done
        * Server: on shutdown and restart truncate all '\0' from notes (rnm to _bkp, create new notes and cpy)

    *Edit file desription & access:
        * Clientside check file existence (like in post)
        * If exists, do the same dialogue (factor it out)
        * Send to server
        * Make a db func for meta editing (just edit fmd and fully rewrite file)
        * Send response

    *Delete file (I consciously allow the admin to delete file mid-download for someone):
        * Clientside check file existence (same as before)
        * If exists, send delete request
        * Make db func for deletinf a file and it's meta
        * Do this serverside, send response, parse it on client

Other:
    * Add new types to debug
    * Add errors in server on recieving admin requests from reg clients and so on, and in client add failsafes too
    * Add new messages -- file/user was created while you were thinking, so as not to crash on concurrent adds
        * Fix segmentation fault in metafiles free (smth with memmove/NULL term) in db_init, fault in DELETE

Refac 2:
    * Factor out deletion from clear-meta & delete file
